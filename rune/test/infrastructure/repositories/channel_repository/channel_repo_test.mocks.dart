// Mocks generated by Mockito 5.2.0 from annotations
// in rune/test/infrastructure/repositories/channel_repository/channel_repo_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:rune/domain/models.dart' as _i2;
import 'package:rune/infrastructure/repositories.dart' as _i5;

import 'channel_repo_test.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeExpect_0<T> extends _i1.Fake implements _i2.Expect<T> {}

/// A class which mocks [ChannelRepoTest].
///
/// See the documentation for Mockito's code generation for more information.
class MockChannelRepoTest extends _i1.Mock implements _i3.ChannelRepoTest {
  MockChannelRepoTest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Expect<List<_i2.Channel>>> getChannels(
          {_i2.User? user,
          int? size,
          int? page,
          String? query,
          String? onlyBookmarked}) =>
      (super.noSuchMethod(
              Invocation.method(#getChannels, [], {
                #user: user,
                #size: size,
                #page: page,
                #query: query,
                #onlyBookmarked: onlyBookmarked
              }),
              returnValue: Future<_i2.Expect<List<_i2.Channel>>>.value(
                  _FakeExpect_0<List<_i2.Channel>>()))
          as _i4.Future<_i2.Expect<List<_i2.Channel>>>);
  @override
  _i4.Future<_i2.Expect<_i2.Channel>> getChannel(
          {_i2.User? user, int? channelId}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getChannel, [], {#user: user, #channelId: channelId}),
              returnValue: Future<_i2.Expect<_i2.Channel>>.value(
                  _FakeExpect_0<_i2.Channel>()))
          as _i4.Future<_i2.Expect<_i2.Channel>>);
  @override
  _i4.Future<_i2.Expect<_i2.Channel>> pinChannel(
          {_i2.User? user, int? channelId}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #pinChannel, [], {#user: user, #channelId: channelId}),
              returnValue: Future<_i2.Expect<_i2.Channel>>.value(
                  _FakeExpect_0<_i2.Channel>()))
          as _i4.Future<_i2.Expect<_i2.Channel>>);
  @override
  _i4.Future<_i2.Expect<bool>> removeChannel(
          {_i2.User? user, int? channelId}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #removeChannel, [], {#user: user, #channelId: channelId}),
              returnValue:
                  Future<_i2.Expect<bool>>.value(_FakeExpect_0<bool>()))
          as _i4.Future<_i2.Expect<bool>>);
  @override
  _i4.Future<_i2.Expect<_i2.Channel>> createChannel(
          _i5.UserRepository? userRepository,
          String? name,
          String? description,
          String? location,
          String? email) =>
      (super.noSuchMethod(
              Invocation.method(#createChannel,
                  [userRepository, name, description, location, email]),
              returnValue: Future<_i2.Expect<_i2.Channel>>.value(
                  _FakeExpect_0<_i2.Channel>()))
          as _i4.Future<_i2.Expect<_i2.Channel>>);
}
